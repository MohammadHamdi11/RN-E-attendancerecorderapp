<Provider>
<ScrollView style={styles.container} contentContainerStyle={styles.scrollContent}>
{connectionMessage && (
<View style={[styles.connectionStatus, { backgroundColor: isOnline ? '#e7f3e8' : '#fff3cd' }]}>
<Text style={{ color: isOnline ? '#28a745' : '#856404' }}>{connectionMessage}</Text>
</View>
)}
<Surface style={styles.card}>
<Title style={styles.title}>Student Selector</Title>
<View style={styles.buttonContainer}>
<Button 
mode="contained" 
style={[styles.primaryButton, styles.fullWidthButton]}
labelStyle={styles.primaryButtonText}
onPress={() => activeSession ? endChecklistSession() : startChecklistSession()}
>
{activeSession ? 'End Session' : 'Start New Session'}
</Button>
{!activeSession && (
<Button 
mode="outlined" 
style={[styles.secondaryButton, styles.fullWidthButton]}
labelStyle={styles.secondaryButtonText}
onPress={handleSyncData}
disabled={!isOnline}
>
Sync Data
</Button>
)}
{activeSession && (
<Button 
mode="outlined" 
style={[styles.secondaryButton, styles.fullWidthButton]}
labelStyle={styles.secondaryButtonText}
onPress={() => setShowManualEntryModal(true)}
>
Manual Entry
</Button>
)}
</View>
{activeSession && (
<View style={styles.sessionInfo}>
<Text style={styles.locationText}>Location: {activeSession.location}</Text>
<Text style={styles.dateTimeText}>Date/Time: {activeSession.formattedDateTime}</Text>
</View>
)}
{selectionStatus ? (
<View style={styles.statusContainer}>
<Text style={styles.statusText}>{selectionStatus}</Text>
</View>
) : null}
{activeSession ? (
<View style={styles.checklistContainer}>
<Searchbar
placeholder="Search students..."
onChangeText={query => setSearchQuery(query)}
value={searchQuery}
style={styles.searchbar}
/>
<View style={styles.filterContainer}>
<View style={styles.filterItem}>
<Text style={styles.filterLabel}>Year:</Text>
<Button 
mode="outlined" 
onPress={() => setShowYearFilterModal(true)}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
{yearFilter === 'all' ? 'All Years' : yearFilter}
</Button>
</View>
<View style={styles.filterItem}>
<Text style={styles.filterLabel}>Group:</Text>
<Button 
mode="outlined" 
onPress={() => setShowGroupFilterModal(true)}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
{groupFilter === 'all' ? 'All Groups' : groupFilter}
</Button>
</View>
</View>
<FlatList
  style={[styles.studentList, { height: 250, backgroundColor: '#ffffff' }]}
  data={filteredStudents}
  keyExtractor={(student) => `student-${student["Student ID"] || student.id || ""}`}
  renderItem={({ item: student }) => (
    <StudentItem 
      student={student}
      isSelected={selectedStudents.has(student["Student ID"] || student.id || "")}
      onToggle={(id) => handleStudentSelection(id, !selectedStudents.has(id))}
      textStyle={{ color: '#24325f' }}
      backgroundColor="#ffffff"
    />
)}
getItemLayout={(data, index) => ({
length: 48,
offset: 48 * index,
index,
})}
nestedScrollEnabled={true}
windowSize={10}
maxToRenderPerBatch={10}
updateCellsBatchingPeriod={50}
removeClippedSubviews={true}
initialNumToRender={10}
ListEmptyComponent={() => (
<View style={styles.emptyList}>
<Text style={styles.emptyText}>
{studentsData.length === 0 
? "No student data available." 
: "No students match the current filters."}
</Text>
</View>
)}
/>
</View>
) : (
<View style={styles.checklistContainer}>
<Text style={styles.placeholderText}>
Click "Start New Session" to begin selecting students.
</Text>
</View>
)}
<Title style={styles.subtitle}>Selected Students</Title>
{activeSession && activeSession.scans && activeSession.scans.length > 0 ? (
<View style={styles.tableContainer}>
  <DataTable>
<DataTable.Header style={{ backgroundColor: '#ffffff' }}>
  <DataTable.Title numeric style={{ flex: 0.2 }}><Text style={{ color: '#24325f' }}>ID</Text></DataTable.Title>
  <DataTable.Title style={{ flex: 0.6 }}><Text style={{ color: '#24325f' }}>Content</Text></DataTable.Title>
  <DataTable.Title style={{ flex: 0.4 }}><Text style={{ color: '#24325f' }}>Time</Text></DataTable.Title>
</DataTable.Header>
    <ScrollView style={{ maxHeight: 200 }} nestedScrollEnabled={true}>
      {activeSession.scans.map((scan, index) => (
<DataTable.Row key={scan.id || index} style={{ backgroundColor: '#ffffff' }}>
  <DataTable.Cell numeric style={{ flex: 0.2 }}><Text style={{ color: '#24325f' }}>{index + 1}</Text></DataTable.Cell>
  <DataTable.Cell style={{ flex: 0.6 }}><Text style={{ color: '#24325f' }}>
    {scan.content || scan.id}
    {scan.isManual ? ' (Manual)' : ''}
  </Text></DataTable.Cell>
  <DataTable.Cell style={{ flex: 0.4 }}><Text style={{ color: '#24325f' }}>{scan.formattedTime}</Text></DataTable.Cell>
</DataTable.Row>
      ))}
    </ScrollView>
  </DataTable>
</View>
) : (
  <Text style={styles.noDataText}>No students selected yet.</Text>
)}
</Surface>
<Portal>
<Modal
  visible={showSessionModal}
  onDismiss={() => setShowSessionModal(false)}
  contentContainerStyle={[styles.modalContent, { backgroundColor: '#ffffff' }]}
>
  <Title style={{ color: '#24325f' }}>Start New Session</Title>
  <Text style={[styles.dropdownLabel, { color: '#24325f' }]}>Location:</Text>
  <View style={[styles.dropdownContainer, { backgroundColor: '#ffffff' }]}>
    <ScrollView style={styles.locationDropdown} nestedScrollEnabled={true}>
      {locationOptions.map(option => (
        <List.Item
          key={option}
          title={option}
          titleStyle={{ color: '#24325f' }}
          onPress={() => {
setLocation(option);
setShowSessionModal(false);
setTimeout(() => {
if (option) {
const now = new Date();
const sessionId = `checklist_${now.getTime()}`;
const formattedDateTime = formatDateTime(now);
const newSession = {
id: sessionId,
location: option,
dateTime: now.toISOString(),
formattedDateTime: formattedDateTime,
scans: [],
inProgress: true,
isChecklist: true
};
setActiveSession(newSession);
setSelectedStudents(new Set());
setSelectionStatus('Session started - Ready to select students');
AsyncStorage.getItem('sessions').then(savedSessions => {
const parsedSessions = savedSessions ? JSON.parse(savedSessions) : [];
const updatedSessions = [...parsedSessions, newSession];
setSessions(updatedSessions);
AsyncStorage.setItem('sessions', JSON.stringify(updatedSessions));
AsyncStorage.setItem(TEMP_CHECKLIST_SESSION_INDEX_KEY, String(updatedSessions.length - 1));
});
saveActiveChecklistSession(newSession);
console.log("New checklist session created:", sessionId);
}
}, 100);
          }}
          style={[styles.locationOption, { backgroundColor: '#ffffff' }]}
        />
      ))}
    </ScrollView>
  </View>
<View style={styles.modalButtons}>
<Button 
mode="text"
labelStyle={styles.secondaryButtonText}
onPress={() => setShowSessionModal(false)}
style={styles.secondaryButton}
>
Cancel
</Button>
</View>
</Modal>
</Portal>
<Portal>
<Modal
visible={showManualEntryModal}
onDismiss={() => setShowManualEntryModal(false)}
contentContainerStyle={styles.modalContent}
>
<Title>Manual Entry</Title>
<TextInput
label="Student ID"
value={manualId}
onChangeText={setManualId}
style={styles.input}
autoFocus
onSubmitEditing={processManualEntry}
/>
<View style={styles.modalButtons}>
<Button 
mode="text" 
onPress={() => setShowManualEntryModal(false)}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
Cancel
</Button>
<Button 
mode="contained" 
onPress={processManualEntry}
disabled={!manualId.trim()}
style={styles.primaryButton}
labelStyle={styles.primaryButtonText}
>
Add
</Button>
</View>
</Modal>
</Portal>
<Portal>
<Modal
visible={showYearFilterModal}
onDismiss={() => setShowYearFilterModal(false)}
contentContainerStyle={styles.modalContent}
>
<Title>Select Year</Title>
<Button 
onPress={() => handleYearFilter('all')}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
All Years
</Button>
<ScrollView style={{ maxHeight: 300 }}>
{getUniqueYears.map(year => (
<Button 
key={year} 
onPress={() => handleYearFilter(year)}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
{year}
</Button>
))}
</ScrollView>
</Modal>
</Portal>
<Portal>
<Modal
visible={showGroupFilterModal}
onDismiss={() => setShowGroupFilterModal(false)}
contentContainerStyle={styles.modalContent}
>
<Title>Select Group</Title>
<Button 
onPress={() => handleGroupFilter('all')}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
All Groups
</Button>
<ScrollView style={{ maxHeight: 300 }}>
{getUniqueGroups.map(group => (
<Button 
key={group} 
onPress={() => handleGroupFilter(group)}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
{group}
</Button>
))}
</ScrollView>
</Modal>
</Portal>
</ScrollView>
</Provider>
);
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#f9f9f9',
  },
  scrollContent: {
    flexGrow: 1,
    paddingBottom: 20,
    backgroundColor: '#f9f9f9',
  },
  card: {
    padding: 16,
    borderRadius: 8,
    elevation: 4,
    backgroundColor: '#ffffff',
    marginBottom: 20,
  },
  title: {
    fontSize: 20,
    marginBottom: 16,
    color: '#24325f',
    fontWeight: 'bold',
    backgroundColor: 'transparent',
  },
  subtitle: {
    fontSize: 16,
    marginTop: 16,
    marginBottom: 8,
    color: '#24325f',
    fontWeight: '500',
    backgroundColor: 'transparent',
  },
  buttonContainer: {
    marginBottom: 16,
    backgroundColor: 'transparent',
  },
  primaryButton: {
    backgroundColor: '#24325f',
    borderColor: '#24325f',
    marginBottom: 8,
    marginRight: 8,
  },
  primaryButtonText: {
    color: 'white',
  },
  secondaryButton: {
    backgroundColor: 'white',
    borderColor: '#24325f',
    borderWidth: 1,
    marginBottom: 8,
    marginRight: 8,
  },
  secondaryButtonText: {
    color: '#24325f',
  },
  sessionInfo: {
    backgroundColor: '#f0f0f5',
    padding: 8,
    borderRadius: 4,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#24325f',
  },
  locationText: {
    fontWeight: 'bold',
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  dateTimeText: {
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  statusContainer: {
    backgroundColor: 'rgba(0,0,0,0.7)',
    padding: 8,
    borderRadius: 20,
    marginBottom: 16,
    alignItems: 'center',
  },
  statusText: {
    color: 'white',
    backgroundColor: 'transparent',
  },
  scannerContainer: {
    height: 300,
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#24325f',
  },
  checklistContainer: {
    height: 300,
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
    justifyContent: 'center',
    padding: 16,
    borderWidth: 1,
    borderColor: '#24325f',
  },
  tableContainer: {
    borderWidth: 1,
    borderColor: '#24325f',
    borderRadius: 8,
    overflow: 'hidden',
    marginBottom: 20,
    backgroundColor: '#fff',
  },
  tableHeader: {
    backgroundColor: '#ffffff',
  },
  tableHeaderText: {
    color: '#24325f',
    fontWeight: 'bold',
  },
  tableRow: {
    backgroundColor: '#ffffff',
  },
  tableCell: {
    color: '#24325f',
  },
  connectionStatus: {
    padding: 8,
    borderRadius: 4,
    marginBottom: 8,
    alignItems: 'center',
  },
  connectionText: {
    color: '#24325f',
    fontWeight: '500',
    backgroundColor: 'transparent',
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    margin: 20,
    borderRadius: 8,
    elevation: 5,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 16,
    backgroundColor: 'transparent',
  },
  dropdownLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  dropdownContainer: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    marginBottom: 16,
    backgroundColor: '#fff',
  },
  locationDropdown: {
    maxHeight: 250,
    backgroundColor: '#ffffff',
  },
  locationOption: {
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    padding: 10,
    backgroundColor: '#ffffff',
  },
  locationOptionText: {
    color: '#24325f',
  },
  input: {
    marginVertical: 10,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    padding: 8,
    backgroundColor: '#ffffff',
    color: '#24325f',
  },
  placeholderText: {
    textAlign: 'center',
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  noDataText: {
    textAlign: 'center',
    color: '#24325f',
    fontStyle: 'italic',
    marginTop: 8,
    backgroundColor: 'transparent',
  },
  errorText: {
    color: '#951d1e',
    fontSize: 14,
    marginBottom: 10,
    backgroundColor: 'transparent',
  },
  searchbar: {
    marginBottom: 8,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
  },
  filterContainer: {
    flexDirection: 'row',
    marginBottom: 8,
    backgroundColor: 'transparent',
  },
  filterItem: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 8,
    backgroundColor: 'transparent',
  },
  filterLabel: {
    marginRight: 8,
    fontWeight: 'bold',
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  studentList: {
    flex: 1,
    backgroundColor: 'white',
    borderRadius: 4,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#24325f',
  },
  studentItem: {
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    padding: 10,
    backgroundColor: '#fff',
  },
  studentItemText: {
    color: '#24325f',
  },
  selectionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  selectionItemText: {
    color: '#24325f',
  },
  emptyList: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f0f0f0',
  },
  emptyText: {
    textAlign: 'center',
    color: '#24325f',
    fontStyle: 'italic',
    backgroundColor: 'transparent',
  },
});
export default ChecklistScreen;

<Provider>
<ScrollView style={styles.container} contentContainerStyle={styles.scrollContent}>
{connectionMessage && (
<View style={[styles.connectionStatus, { backgroundColor: isOnline ? '#e7f3e8' : '#fff3cd' }]}>
<Text style={{ color: isOnline ? '#28a745' : '#856404' }}>{connectionMessage}</Text>
</View>
)}
<Surface style={styles.card}>
<Title style={styles.title}>QR Code Scanner</Title>
<View style={styles.buttonContainer}>
<Button 
mode="contained" 
style={[styles.primaryButton, styles.fullWidthButton]}
labelStyle={styles.primaryButtonText}
onPress={() => activeSession ? endSession() : setShowSessionModal(true)}
>
{activeSession ? 'End Session' : 'Start New Session'}
</Button>
{activeSession && (
<Button 
mode="outlined" 
style={[styles.secondaryButton, styles.fullWidthButton]}
labelStyle={styles.secondaryButtonText}
onPress={() => setShowManualEntryModal(true)}
>
Manual Entry
</Button>
)}
</View>
{activeSession && (
<View style={styles.sessionInfo}>
<Text style={styles.locationText}>Location: {activeSession.location}</Text>
<Text style={styles.dateTimeText}>Date/Time: {activeSession.formattedDateTime}</Text>
</View>
)}
{scanStatus ? (
<View style={styles.statusContainer}>
<Text style={styles.statusText}>{scanStatus}</Text>
</View>
) : null}
<View style={styles.scannerContainer}>
{activeSession ? (
<BarCodeScanner
onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
style={StyleSheet.absoluteFillObject}
/>
) : (
<Text style={styles.placeholderText}>
Click "Start New Session" to begin scanning QR codes.
</Text>
)}
</View>
<Title style={styles.subtitle}>Scanned QR Codes</Title>
{activeSession && activeSession.scans && activeSession.scans.length > 0 ? (
<View style={styles.tableContainer}>
<DataTable>
<DataTable.Header style={{ backgroundColor: '#ffffff' }}>
  <DataTable.Title numeric style={{ flex: 0.2 }}><Text style={{ color: '#24325f' }}>ID</Text></DataTable.Title>
  <DataTable.Title style={{ flex: 0.6 }}><Text style={{ color: '#24325f' }}>Content</Text></DataTable.Title>
  <DataTable.Title style={{ flex: 0.4 }}><Text style={{ color: '#24325f' }}>Time</Text></DataTable.Title>
</DataTable.Header>
<ScrollView style={{ maxHeight: 200 }} nestedScrollEnabled={true}>
{activeSession.scans.map((scan, index) => (
<DataTable.Row key={scan.id || index} style={{ backgroundColor: '#ffffff' }}>
  <DataTable.Cell numeric style={{ flex: 0.2 }}><Text style={{ color: '#24325f' }}>{index + 1}</Text></DataTable.Cell>
  <DataTable.Cell style={{ flex: 0.6 }}><Text style={{ color: '#24325f' }}>
    {scan.content || scan.id}
    {scan.isManual ? ' (Manual)' : ''}
  </Text></DataTable.Cell>
  <DataTable.Cell style={{ flex: 0.4 }}><Text style={{ color: '#24325f' }}>{scan.formattedTime}</Text></DataTable.Cell>
</DataTable.Row>
))}
</ScrollView>
</DataTable>
</View>
) : (
<Text style={styles.noDataText}>No QR codes scanned yet.</Text>
)}
</Surface>
<Portal>
<Modal
  visible={showSessionModal}
  onDismiss={() => setShowSessionModal(false)}
  contentContainerStyle={[styles.modalContent, { backgroundColor: '#ffffff' }]}
>
  <Title style={{ color: '#24325f' }}>Start New Session</Title>
  <Text style={[styles.dropdownLabel, { color: '#24325f' }]}>Location:</Text>
  <View style={[styles.dropdownContainer, { backgroundColor: '#ffffff' }]}>
    <ScrollView style={styles.locationDropdown} nestedScrollEnabled={true}>
      {locationOptions.map(option => (
        <List.Item
          key={option}
          title={option}
          titleStyle={{ color: '#24325f' }}
          onPress={() => {
setLocation(option);
setShowSessionModal(false);
setTimeout(() => {
if (option) {
const now = new Date();
const sessionId = `session_${now.getTime()}`;
const formattedDateTime = formatDateTime(now);
const newSession = {
id: sessionId,
location: option,
dateTime: now.toISOString(),
formattedDateTime: formattedDateTime,
scans: [],
inProgress: true
};
setActiveSession(newSession);
setScans([]);
setScanStatus('Session started - Ready to scan');
AsyncStorage.getItem('sessions').then(savedSessions => {
const parsedSessions = savedSessions ? JSON.parse(savedSessions) : [];
const updatedSessions = [...parsedSessions, newSession];
setSessions(updatedSessions);
AsyncStorage.setItem('sessions', JSON.stringify(updatedSessions));
AsyncStorage.setItem(TEMP_SCANNER_SESSION_INDEX_KEY, String(updatedSessions.length - 1));
});
saveActiveScannerSession(newSession);
console.log("New scanner session created:", sessionId);
}
}, 100);
          }}
          style={[styles.locationOption, { backgroundColor: '#ffffff' }]}
        />
      ))}
    </ScrollView>
  </View>
<View style={styles.modalButtons}>
<Button 
mode="text"
onPress={() => setShowSessionModal(false)}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
Cancel
</Button>
</View>
</Modal>
</Portal>
<Portal>
<Modal
visible={showManualEntryModal}
onDismiss={() => setShowManualEntryModal(false)}
contentContainerStyle={styles.modalContent}
>
<Title>Manual Entry</Title>
<TextInput
label="Student ID"
value={manualId}
onChangeText={setManualId}
style={styles.input}
autoFocus
onSubmitEditing={processManualEntry}
/>
<View style={styles.modalButtons}>
<Button 
mode="text" 
onPress={() => setShowManualEntryModal(false)}
style={styles.secondaryButton}
labelStyle={styles.secondaryButtonText}
>
Cancel
</Button>
<Button 
mode="contained" 
onPress={processManualEntry}
disabled={!manualId.trim()}
style={styles.primaryButton}
labelStyle={styles.primaryButtonText}
>
Add
</Button>
</View>
</Modal>
</Portal>
</ScrollView>
</Provider>
);
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#f9f9f9',
  },
  scrollContent: {
    flexGrow: 1,
    paddingBottom: 20,
    backgroundColor: '#f9f9f9',
  },
  card: {
    padding: 16,
    borderRadius: 8,
    elevation: 4,
    backgroundColor: '#ffffff',
    marginBottom: 20,
  },
  title: {
    fontSize: 20,
    marginBottom: 16,
    color: '#24325f',
    fontWeight: 'bold',
    backgroundColor: 'transparent',
  },
  subtitle: {
    fontSize: 16,
    marginTop: 16,
    marginBottom: 8,
    color: '#24325f',
    fontWeight: '500',
    backgroundColor: 'transparent',
  },
  buttonContainer: {
    marginBottom: 16,
    backgroundColor: 'transparent',
  },
  primaryButton: {
    backgroundColor: '#24325f',
    borderColor: '#24325f',
    marginBottom: 8,
    marginRight: 8,
  },
  primaryButtonText: {
    color: 'white',
  },
  secondaryButton: {
    backgroundColor: 'white',
    borderColor: '#24325f',
    borderWidth: 1,
    marginBottom: 8,
    marginRight: 8,
  },
  secondaryButtonText: {
    color: '#24325f',
  },
  sessionInfo: {
    backgroundColor: '#f0f0f5',
    padding: 8,
    borderRadius: 4,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#24325f',
  },
  locationText: {
    fontWeight: 'bold',
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  dateTimeText: {
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  statusContainer: {
    backgroundColor: 'rgba(0,0,0,0.7)',
    padding: 8,
    borderRadius: 20,
    marginBottom: 16,
    alignItems: 'center',
  },
  statusText: {
    color: 'white',
    backgroundColor: 'transparent',
  },
  scannerContainer: {
    height: 300,
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#24325f',
  },
  checklistContainer: {
    height: 300,
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
    justifyContent: 'center',
    padding: 16,
    borderWidth: 1,
    borderColor: '#24325f',
  },
  tableContainer: {
    borderWidth: 1,
    borderColor: '#24325f',
    borderRadius: 8,
    overflow: 'hidden',
    marginBottom: 20,
    backgroundColor: '#fff',
  },
  tableHeader: {
    backgroundColor: '#ffffff',
  },
  tableHeaderText: {
    color: '#24325f',
    fontWeight: 'bold',
  },
  tableRow: {
    backgroundColor: '#ffffff',
  },
  tableCell: {
    color: '#24325f',
  },
  connectionStatus: {
    padding: 8,
    borderRadius: 4,
    marginBottom: 8,
    alignItems: 'center',
  },
  connectionText: {
    color: '#24325f',
    fontWeight: '500',
    backgroundColor: 'transparent',
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    margin: 20,
    borderRadius: 8,
    elevation: 5,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 16,
    backgroundColor: 'transparent',
  },
  dropdownLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  dropdownContainer: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    marginBottom: 16,
    backgroundColor: '#fff',
  },
  locationDropdown: {
    maxHeight: 250,
    backgroundColor: '#ffffff',
  },
  locationOption: {
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    padding: 10,
    backgroundColor: '#ffffff',
  },
  locationOptionText: {
    color: '#24325f',
  },
  input: {
    marginVertical: 10,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    padding: 8,
    backgroundColor: '#ffffff',
    color: '#24325f',
  },
  placeholderText: {
    textAlign: 'center',
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  noDataText: {
    textAlign: 'center',
    color: '#24325f',
    fontStyle: 'italic',
    marginTop: 8,
    backgroundColor: 'transparent',
  },
  errorText: {
    color: '#951d1e',
    fontSize: 14,
    marginBottom: 10,
    backgroundColor: 'transparent',
  },
  searchbar: {
    marginBottom: 8,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
  },
  filterContainer: {
    flexDirection: 'row',
    marginBottom: 8,
    backgroundColor: 'transparent',
  },
  filterItem: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 8,
    backgroundColor: 'transparent',
  },
  filterLabel: {
    marginRight: 8,
    fontWeight: 'bold',
    color: '#24325f',
    backgroundColor: 'transparent',
  },
  studentList: {
    flex: 1,
    backgroundColor: 'white',
    borderRadius: 4,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#24325f',
  },
  studentItem: {
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    padding: 10,
    backgroundColor: '#fff',
  },
  studentItemText: {
    color: '#24325f',
  },
  selectionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  selectionItemText: {
    color: '#24325f',
  },
  emptyList: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f0f0f0',
  },
  emptyText: {
    textAlign: 'center',
    color: '#24325f',
    fontStyle: 'italic',
    backgroundColor: 'transparent',
  },
});
export default ScannerScreen;